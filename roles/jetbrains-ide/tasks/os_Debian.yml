---
# yamllint disable rule:line-length
- name: 'Test if {{ jetbrains_ide_name }}-{{ jetbrains_ide_version }} is already present'
  register: jetbrains_ide_info_stat
  stat:
    path: '{{ jetbrains_product_info }}'

- name: 'Fetch package {{ jetbrains_ide_name }}-{{ jetbrains_ide_version }}'
  when: not jetbrains_ide_info_stat.stat.exists
  get_url:
    url: '{{ jetbrains_download_url }}'
    dest: '{{ jetbrains_download_dest }}'

- name: 'Extract {{ jetbrains_ide_name }}-{{ jetbrains_ide_version }}'
  when: not jetbrains_ide_info_stat.stat.exists
  unarchive:
    src: '{{ jetbrains_download_dest }}'
    dest: '{{ jetbrains_download_directory }}'
    remote_src: true

- name: 'Move {{ jetbrains_ide_name }}-{{ jetbrains_ide_version }}'
  when: not jetbrains_ide_info_stat.stat.exists
  command: 'mv {{ jetbrains_download_directory }}/{{ jetbrains_directory }} {{ jetbrains_ide_prefix }}'
  become: true

- name: 'Download {{ jetbrains_ide_name }} plugins'
  when: not jetbrains_ide_info_stat.stat.exists
  get_url:
    url: "{{ jetbrains_plugin_download_mirror }}{{ item }}"
    dest: "{{ jetbrains_download_directory }}"
  register: jetbrains_plugins_downloaded
  with_items: "{{ jetbrains_plugins }}"

- name: Ensure unzip is installed (required for unarchive)
  apt:
    name: unzip
    state: present
  become: true

- name: 'Install {{ jetbrains_ide_name }} plugins'
  when: not jetbrains_ide_info_stat.stat.exists
  unarchive:
    src: "{{ item.dest }}"
    dest: "{{ jetbrains_ide_prefix }}/{{ jetbrains_directory }}/plugins"
    remote_src: true
  with_items: "{{ jetbrains_plugins_downloaded.results }}"

- name: Ensure jetbrains desktop entry direcotory exists
  when: not jetbrains_ide_info_stat.stat.exists
  file:
    path: '{{ jetbrains_desktop_entry_dir }}'
    state: directory

- name: 'Create {{ jetbrains_ide_name }} desktop entry'
  when: not jetbrains_ide_info_stat.stat.exists
  template:
    src: jetbrains.desktop.j2
    dest: "{{ jetbrains_desktop_entry_dir }}/{{ jetbrains_desktop_file }}"
    backup: true

- name: Ensure gsettings is present
  apt:
    name: libglib2.0-bin
    state: present
  become: true

- name: Get gsettings favorite-apps
  command: gsettings get org.gnome.shell favorite-apps
  register: gsettings_favorite_apps
  changed_when: false
  ignore_errors: true

- name: 'Add {{ jetbrains_ide_name }} to favorites'
  shell: |
    set -o pipefail
    gsettings set org.gnome.shell favorite-apps "$(gsettings get org.gnome.shell favorite-apps | sed "s/]/,'{{ jetbrains_desktop_file }}']/")"
  when:
    - gsettings_favorite_apps.rc == 0
    - gsettings_favorite_apps.stdout is not search("{{ jetbrains_desktop_file }}")
  args:
    executable: /bin/bash
